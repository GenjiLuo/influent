/*
 * Copyright (C) 2013-2015 Uncharted Software Inc.
 *
 * Property of Uncharted(TM), formerly Oculus Info Inc.
 * http://uncharted.software/
 *
 * Released under the MIT License.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

@namespace("influent.idl")


/**
 * This defines an API for searching a graph-like database based on patterns.
 */
protocol FL_PatternSearch {
	import idl "Search_v2.0.avdl";
	import idl "FutureResults_v2.0.avdl";

	//------------------------------------------------------------------------------------------------------------------
	
	/**
	 * An entity that returns from pattern matching as part of a subgraph.
	 */
	record FL_EntityMatchResult {
		/** search match score */
		double matchScore = 0;
		
		/** UID of the matched FL_EntityMatchDescriptor in the matched pattern */
		string uid = null;

		/** role name of the matched FL_EntityMatchDescriptor in the matched pattern */
		union{null, string} role = null;
	
		/** the entity */
		FL_Entity entity;
	}

	//------------------------------------------------------------------------------------------------------------------
	
	/**
	 * A link that returns from pattern matching as part of a subgraph.
	 */
	record FL_LinkMatchResult {
		/** search match score */
		double matchScore = 0;
		
		/** UID of the matched FL_LinkMatchDescriptor in the matched pattern */
		string uid = null;

		/** role name of the matched FL_LinkMatchDescriptor in the matched pattern */
		union{null, string} role = null;
	
		/** the link */
		FL_Link link;		
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * A single search result is some annotated subgraph
	 */
	record FL_PatternSearchResult {
		/** search match score */
		double matchScore = 0;
		
		/** entity results 
		 * There needs to be at least one entity in the result
		 */
		array<FL_EntityMatchResult> entities;
		
		/** links between those entities **/
		union {array<FL_LinkMatchResult>, null} links;
	}

	//------------------------------------------------------------------------------------------------------------------
	
	/**
	 * The set of results from a single search call. Each item also has a match score.
	 */
	record FL_PatternSearchResults {
		/** total number of results found */
		long total = -1;
		
		/** array of Items (Entities or Links) with match scores */
		array<FL_PatternSearchResult> results;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Returns a set of sub-graphs based on specified user-defined example.
	 *
	 * Service URL: /pattern/search/example
	 * HTTP Method: POST and GET
	 *
	 * @param example		a user-authored pattern descriptor
	 * @param service		uid of an pattern service
	 * @param start		    0-based index of first result to return
	 * @param max			maximum number of results to return
	 * @param dateRange	    optional global date filter for results
	 * @return			    either results, or a future object (use getResults or the FutureResults service)
	 */
	union{FL_Future,FL_PatternSearchResults} searchByExample(
		FL_PatternDescriptor example,
		union {null, string} service = null,
		long start = 0,
		long max = -1,
		union {FL_BoundedRange, null} dateRange = null, // ADDED IN 1.5
		boolean useAptima // ADDED IN 1.5
	);

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Returns a set of sub-graphs based on specified pattern from the Pattern Library
	 *
	 * Service URL: /pattern/search/template
	 * HTTP Method: POST and GET
	 *
	 * @param pattern		UID of a pattern from the template library
	 * @param service		uid of an pattern service
	 * @param start		    0-based index of first result to return
	 * @param max			maximum number of results to return
	 * @param dateRange	    optional global date filter for results
	 * @return			    either results, or a future object (use getResults or the FutureResults service)
	 */
	union{FL_Future,FL_PatternSearchResults} searchByTemplate(
		string template,
		union {null, string} service = null,
		long start = 0,
		long max = -1,
		union {FL_BoundedRange, null} dateRange = null // ADDED IN 1.5
	);

	//------------------------------------------------------------------------------------------------------------------
	
	/**
	 * Block until all results are available.
	 *
	 * Service URL: /pattern/search/results
	 * HTTP Method: POST and GET
	 *
	 * @param future	the future returned from the original call
	 * @return 			the results
	 */
	FL_PatternSearchResults getResults(
		FL_Future future
	);

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Returns a list of available patterns templates in the existing pattern library.
	 *
	 * Service URL: /pattern/templates
	 * HTTP Method: GET
	 *
	 * @return
	 */
	array<FL_PatternDescriptor> getPatternTemplates();

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Returns a list of available patterns templates in the existing pattern library.
	 *
	 * Service URL: /pattern/services
	 * HTTP Method: GET
	 *
	 * @return
	 */
	array<FL_Service> getServices();
}
